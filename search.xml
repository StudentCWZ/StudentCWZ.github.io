<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第十六讲 Git rebase</title>
      <link href="/post/4c946041.html"/>
      <url>/post/4c946041.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-rebase"><a href="#Git-rebase" class="headerlink" title="Git rebase"></a>Git rebase</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol><li>rebase：变基，意即改变分支的根基</li><li>rebase 作用：从某种程度上来说，rebase 与 merge 可以完成类似的工作，不过两者的工作方式有着显著的差异</li><li>Git rebase 操作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout branch_name</span><br><span class="line">git rebase branch_new_name</span><br></pre></td></tr></table></figure></li><li>Git merge 操作和 Git rebase 操作的区别: 两者结果内容一样，过程和操作方式完全不一样。</li><li>Git rebase 操作会修改提交历史，会让提交历史变成一条直线。</li><li>Git rebase 原理：实际上是将一个分支的修改内容应用到里另外一个分支上，不断的应用，所以提交历史变成一条直线。</li><li>Git rebase 注意事项</li></ol><ul><li>rebase 过程中也会出现冲突</li><li>解决冲突后，使用 git add 添加，然后执行如下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure></li><li>接下来 Git 会继续应用余下的补丁</li><li>任何时候都可以通过如下命令终止 rebase ，分支会恢复到 rebase 开始前的状态<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure></li></ul><ol start="8"><li>Git rebase 最佳实践</li></ol><ul><li>不要对 master 分支执行 rebase ，否则会引起很多问题</li><li>一般来说，执行 rebase 的分支都是自己的本地分支，没有推送到远程的版本库。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十五讲 Git subtree 与 Git cherry-pick</title>
      <link href="/post/2b68b650.html"/>
      <url>/post/2b68b650.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-subtree-与-Git-cherry-pick"><a href="#Git-subtree-与-Git-cherry-pick" class="headerlink" title="Git subtree 与 Git cherry-pick"></a>Git subtree 与 Git cherry-pick</h1><h2 id="Git-subtree"><a href="#Git-subtree" class="headerlink" title="Git subtree"></a>Git subtree</h2><ol><li>Git submodule 如果在主项目修改依赖项目会造成很多问题，Git subtree 和 Git submodule 解决问题一样，Git subtree 可以解决针对双向修改。</li></ol><ul><li>新建 git_subtree_parent 和 git_subtree_children 两个工程(远程仓库)，其中 git_subtree_children 是子工程。</li><li>在本地创建仓库 git_subtree_parent 和 git_subtree_children</li><li>在本地创建的仓库 git_subtree_parent 新建文件 parent.txt ，将修改纳入暂存区，并进行提交</li><li>配置远程仓库 git_subtree_parent 信息</li><li>将本地的 git_subtree_parent 提交推送到远程 git_subtree_parent 中</li><li>在本地创建的仓库 git_subtree_children 新建 children.txt，将修改纳入暂存区，并进行提交</li><li>配置远程仓库 git_subtree_children 信息</li><li>将本地的 git_subtree_children 提交推送到远程 git_subtree_children</li><li>在本地创建的仓库 git_subtree_children 新建 hello.txt ，将修改纳入暂存区，并进行提交</li><li>将本地的 git_subtree_children 提交推送到远程 git_subtree_children</li><li>在主项目关联子项目的远程库</li><li>执行 git subtree 命令，将子依赖拉到主项目</li><li>如果 git_children 发生变化，git_parent 也随之变化</li><li>在主工程的 git_subtree_parent&#x2F;subtree 目录下修改文件 children.txt ，将修改纳入暂存区，并进行提交</li><li>将本地的 git_subtree_parent&#x2F;subtree 目录下修改推送到远程 git_subtree_parent 中</li><li>将本地的 git_subtree_parent&#x2F;subtree 目录下修改推送到远程 git_subtree_children</li></ul><ol start="2"><li>在主项目关联子项目的远程库命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add subtree-origin git@github.com:gitlecture/git_subtree_children.git</span><br></pre></td></tr></table></figure></li><li>执行 git subtree 命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree add --prefix=subtree subtree-orign master --squash <span class="comment"># squash 参数表示子项目的多次提交被压缩成一次提交</span></span><br></pre></td></tr></table></figure></li><li>拉取 git_subtree_children 更新<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree pull --prefix=subtree subtree-origin --squash <span class="comment"># squash 也可以不用(注意：要是不用就所有 subtree 命令不用，要用就所有 subtree 命令都用)</span></span><br></pre></td></tr></table></figure></li><li>将本地的 git_subtree_parent&#x2F;subtree 目录下修改推送到远程 git_subtree_parent 中<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li><li>将本地的 git_subtree_parent&#x2F;subtree 目录下修改推送到远程 git_subtree_children<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree push --prefix=subtree subtree-origin master</span><br></pre></td></tr></table></figure></li><li>将远程的 git_subtree_children 拉到本地 git_subtree_children<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="comment"># 在 git_subtree_children 目录下</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Git-cherry-pick"><a href="#Git-cherry-pick" class="headerlink" title="Git cherry-pick"></a>Git cherry-pick</h2><ol><li>作用：将在一个分支的修改应用到另一个分支上(主要用于本地分支)</li><li>将一个分支的修改应用到另一个分支上(例如将在 develop 分支的修改应用于 master 分支)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick commit_id <span class="comment"># 将其他分支的一个提交所做的修改应用到当前分支</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十四讲 Git 裸库与 Git submodule</title>
      <link href="/post/47e9a5ce.html"/>
      <url>/post/47e9a5ce.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-裸库与-Git-submodule"><a href="#Git-裸库与-Git-submodule" class="headerlink" title="Git 裸库与 Git submodule"></a>Git 裸库与 Git submodule</h1><h2 id="Git-裸库"><a href="#Git-裸库" class="headerlink" title="Git 裸库"></a>Git 裸库</h2><ol><li>没有工作区的 Git 仓库(一般在服务器端)</li><li>创建裸库命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init --bare <span class="comment"># 没有工作区</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Git-submodule"><a href="#Git-submodule" class="headerlink" title="Git submodule"></a>Git submodule</h2><ol><li>项目的相互协作(多模块开发-项目的依赖)</li></ol><ul><li>准备工作<ul><li>在 GitHub 上创建仓库 git_parent 和 git_children</li><li>在本地创建仓库 git_parent 和 git_children</li><li>在本地创建的仓库 git_parent 新建文件 parent.txt ，将修改纳入暂存区，并进行提交</li><li>配置远程仓库 git_parent 信息</li><li>将本地的 git_parent 提交推送到远程 git_parent</li><li>在本地创建的仓库 git_children 新建 submodule.txt ，将修改纳入暂存区，并进行提交</li><li>配置远程仓库 git_children 信息</li><li>将本地的 git_children 提交推送到远程 git_children</li><li>在本地创建的仓库 git_children 新建 hello.txt ，将修改纳入暂存区，并进行提交</li><li>将本地的 git_children 提交推送到远程 git_children</li><li>执行 git submodule 命令，将子依赖拉到主项目</li><li>将文件修改纳入暂存区，接着进行提交</li><li>如果 git_children 发生变化，git_parent 也随之变化</li></ul></li></ul><ol start="2"><li>git submodule 命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule git@github.com:gitlecture/git_children.git my module</span><br></pre></td></tr></table></figure></li><li>拉取 <code>git_children</code> 更新<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="comment"># 在 git_parent/myModule 目录下</span></span><br></pre></td></tr></table></figure></li><li>拉取所有依赖子模块的所有更新<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule foreach git pull</span><br></pre></td></tr></table></figure></li><li>如果一个项目包含着 submodule ，进行 git clone 操作的时候，默认情况下是不会把 submodule 的代码克隆下来，需要手工的去执行一次<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:gitlecture/git_parent.git parent2 <span class="comment"># 克隆</span></span><br><span class="line">git submodule init <span class="comment"># submodule 初始化</span></span><br><span class="line">git submodule update --recursive <span class="comment"># 进行子模块更新</span></span><br></pre></td></tr></table></figure></li><li>进行 git clone 操作时候，使用后面加参数将所有子模块的更新全部克隆下来<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:gitlecture/git_parent.git parent3 --recursive</span><br></pre></td></tr></table></figure></li><li>删除 submodule (命令组合)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.将 submodule 从缓存区删除</span></span><br><span class="line">git <span class="built_in">rm</span> --cached mymodule</span><br><span class="line"><span class="comment"># 2.将 submodule 的实体文件从工作区删除</span></span><br><span class="line"><span class="built_in">rm</span> -rf mymodule</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;remove submodule&#x27;</span></span><br><span class="line">git push</span><br><span class="line"><span class="comment"># 3.将 .gitmodules 目录删除</span></span><br><span class="line"><span class="built_in">rm</span> .gitmodules</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;remove submodules&#x27;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十三讲 Git gc</title>
      <link href="/post/db6359d5.html"/>
      <url>/post/db6359d5.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-gc"><a href="#Git-gc" class="headerlink" title="Git gc"></a>Git gc</h1><h2 id="git-垃圾收集"><a href="#git-垃圾收集" class="headerlink" title="git 垃圾收集"></a>git 垃圾收集</h2><ol><li>git 垃圾收集主要用于做一些文件压缩，将分散在不同地方的文件给合并到一起，对一些对象通过一些手段将其所占体积减少。(git gc 实际开发中使用很少，因为很多时候 git 后台自动运行)</li><li>进入本地仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> repository_name</span><br></pre></td></tr></table></figure></li><li>进入 refs 目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> refs</span><br></pre></td></tr></table></figure></li><li>进入 heads 目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> heads</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">cat</span> branch_name <span class="comment"># 查看本地分支内容</span></span><br></pre></td></tr></table></figure></li><li>进入 remotes&#x2F;origin 目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> remotes/origin</span><br><span class="line"><span class="built_in">cat</span> branch_name <span class="comment"># 查看远程分支内容</span></span><br></pre></td></tr></table></figure></li><li>进入 tags 目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tags</span><br><span class="line"><span class="built_in">cat</span> v1.0 <span class="comment"># 查看标签内容</span></span><br></pre></td></tr></table></figure></li><li>运行 git gc 命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git gc <span class="comment"># 文件压缩(git gc 实际上把 refs 目录下的所有文件被打包到 pached-refs 目录下，增加新的提交信息，则该信息还是在 refs 的目录下)</span></span><br></pre></td></tr></table></figure></li><li>git 每次提交的对象保存到 .git&#x2F;objects&#x2F;info 的 packs 文件中(进行压缩后 .git&#x2F;objects&#x2F;info&#x2F;packs 文件会被压缩到 .git&#x2F;objects&#x2F;pack)</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十二讲 Git 远程标签</title>
      <link href="/post/ea965a0c.html"/>
      <url>/post/ea965a0c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-远程标签"><a href="#Git-远程标签" class="headerlink" title="Git 远程标签"></a>Git 远程标签</h1><h2 id="远程标签"><a href="#远程标签" class="headerlink" title="远程标签"></a>远程标签</h2><ol><li>列出本地的所有标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure></li><li>创建一个轻量级标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0</span><br></pre></td></tr></table></figure></li><li>创建带注释的标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v2.0 -m <span class="string">&#x27;v2.0 released&#x27;</span></span><br></pre></td></tr></table></figure></li><li>查看标签内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show v1.0</span><br></pre></td></tr></table></figure></li><li>搜索标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -l <span class="string">&#x27;v&#x27;</span> <span class="comment"># 利用通配符</span></span><br></pre></td></tr></table></figure></li><li>推送标签到远程<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.0</span><br><span class="line">git push origin v1.0 v2.0 <span class="comment"># 少数标签</span></span><br><span class="line">git push origin --tags <span class="comment"># 将标签 批量推送到远程</span></span><br></pre></td></tr></table></figure></li><li>删除远程标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/v1.0</span><br><span class="line">git push origin --delete tag v1.0</span><br></pre></td></tr></table></figure></li><li>将本地标签推送到远程的完整语法<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin refs/tags/v1.0:refs/tags/v1.0</span><br></pre></td></tr></table></figure></li><li>只从远程拉取标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin tag v1.0</span><br></pre></td></tr></table></figure></li><li>只从远程拉取标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin tag v1.0</span><br></pre></td></tr></table></figure></li><li>显示远程信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote origin show</span><br></pre></td></tr></table></figure></li><li>删除远程游离的分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin <span class="comment"># 通常删除分支后的操作</span></span><br></pre></td></tr></table></figure></li><li>如果远端上有一个 master 分支，本地就可以通过下面几种方式来访问它的历史记录：</li></ol><ul><li>查看远程分支的历史记录(3 种方式)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> origin/matser</span><br><span class="line">git <span class="built_in">log</span> remotes/origin/master</span><br><span class="line">git <span class="built_in">log</span> refs/remotes/origin/master</span><br></pre></td></tr></table></figure></li></ul><ol start="14"><li>将远程的某个分支的内容拉取到本地的新远程分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master:refs/origin/mymaster</span><br></pre></td></tr></table></figure></li><li>在本地创建新分支并追踪本地的远程分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --track origin mymaster</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十一讲 Git refspec</title>
      <link href="/post/d0933ad4.html"/>
      <url>/post/d0933ad4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-refspec"><a href="#Git-refspec" class="headerlink" title="Git refspec"></a>Git refspec</h1><h2 id="Git-别名"><a href="#Git-别名" class="headerlink" title="Git 别名"></a>Git 别名</h2><ol><li>配置别名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.br branch # 配置信息在 ~/.gitconfig 文件下</span><br><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.unstage &#x27;reset HEAD&#x27;</span><br><span class="line">git config --global alias.ui &#x27;!git&#x27;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Git-refspec-1"><a href="#Git-refspec-1" class="headerlink" title="Git refspec"></a>Git refspec</h2><h3 id="git-push-相关操作"><a href="#git-push-相关操作" class="headerlink" title="git push 相关操作"></a>git push 相关操作</h3><ol><li>git push 操作的完整命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin srcbranch:destbranch <span class="comment"># 建议的 git push 命令</span></span><br></pre></td></tr></table></figure></li><li>将本地分支推送到远程<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin branch_name <span class="comment"># 将本地分支推送到远程(默认远程分支名与本地一样)</span></span><br><span class="line">git push -u origin branch_name <span class="comment"># 跟上一条命令一样效果</span></span><br><span class="line">git push --set-upstream origin branch_name:branch_new_name <span class="comment"># 将本地分支推送到远程并且远程分支名与本地所关联的分支不同名</span></span><br><span class="line"><span class="comment"># 如果不同名，则进行 git push 操作，则要执行以下命令</span></span><br><span class="line">git push origin HEAD:branch_new_name <span class="comment"># 尽可能同名(不同名无法简写 git push 命令)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="git-pull-相关操作"><a href="#git-pull-相关操作" class="headerlink" title="git pull 相关操作"></a>git pull 相关操作</h3><ol><li>git pull 操作的完整命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin srcbranch:destbranch</span><br></pre></td></tr></table></figure></li><li>将远程分支拉到本地<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="comment"># 将远程所有分支改变都拉到本地</span></span><br><span class="line">git checkout -b branch_name origin/branch_name <span class="comment"># 创建跟远程分支同名的本地分支，并关联。</span></span><br><span class="line">git checkout --track origin/branch_name分支来追踪 <span class="comment"># 本地创建同名的 branch_name 分支来追踪 origin/branch_name (与上一条命令意思完全一样)</span></span><br></pre></td></tr></table></figure></li><li>删除远程分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin :branch_name <span class="comment"># 将本地的一个空分支推送到远程某个分支(意味着删除远程的该分支)</span></span><br><span class="line">git push origin --delete branch_name <span class="comment"># 与上一个命令一样效果</span></span><br></pre></td></tr></table></figure></li><li>重命名远程分支</li></ol><ul><li>删除远程分支</li><li>本地重命名分支</li><li>将本地重命名后的分支推送到远程</li></ul><h2 id="HEAD-文件相关内容"><a href="#HEAD-文件相关内容" class="headerlink" title="HEAD 文件相关内容"></a>HEAD 文件相关内容</h2><ol><li>HEAD 标记</li></ol><ul><li>HEAD 文件是一个指向你当前所在分支的引用标识符，该文件内部并不包含 SHA-1 值，而是包含一个指向另外一个引用的指针。</li><li>当执行 git commit 命令时，git 会创建一个 commit 对象，并且将这个 commit 对象的 parent 指针设置为 HEAD 所指向的引用的 SHA-1 值。</li><li>我们对于 HEAD 修改的任何操作都会被 git reflog 完整记录下来。</li><li>实际上，我们可以通过对 git 底层命令 symbolic-ref 来实现对 HEAD 文件内容的修改。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git symbolic-ref HEAD <span class="comment"># 读取</span></span><br><span class="line">git symbolic-ref HEAD refs/heads/branch_name <span class="comment"># 写入</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十讲 Git 远程操作与 Git 协作</title>
      <link href="/post/1624a6c0.html"/>
      <url>/post/1624a6c0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-远程操作与-Git-协作"><a href="#Git-远程操作与-Git-协作" class="headerlink" title="Git 远程操作与 Git 协作"></a>Git 远程操作与 Git 协作</h1><h2 id="Git-远程操作"><a href="#Git-远程操作" class="headerlink" title="Git 远程操作"></a>Git 远程操作</h2><ol><li>建立 SSH 安全连接<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 1.配置远程</span><br><span class="line">git remote add orgin git@github.com:repository_name/repository_name.git # 远程仓库 SSH 链接地址</span><br><span class="line">git remote show orgin</span><br><span class="line"># 2.把公钥放置远程</span><br><span class="line">cd .ssh</span><br><span class="line">ls</span><br><span class="line">vi known_hosts</span><br><span class="line">which ssh-keygen # 生成公钥</span><br><span class="line">ssh-keygen # 生成公钥(敲入命令回车，要求输入密码连续两次回车)</span><br><span class="line">ls id_rsa.pub # 进入公钥文件夹(把公钥粘贴放置 GitHub 中 settings 的 Deploy keys 上面)</span><br><span class="line"># 3.把本地分支推送到远程</span><br><span class="line">git push -u orgin master # 将本地的 master 分支推送到远程</span><br></pre></td></tr></table></figure></li><li>查看所有远程仓库的别名<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show</span><br></pre></td></tr></table></figure></li><li>查看远程仓库所有信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show repository_name</span><br></pre></td></tr></table></figure></li><li>重命名远程仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rename origin origin2</span><br></pre></td></tr></table></figure></li><li>删除远程仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin</span><br></pre></td></tr></table></figure></li><li>删除之后再次创建<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add orgin git@github.com:repository_name/epository_name.git</span><br></pre></td></tr></table></figure></li></ol><h2 id="更新-git"><a href="#更新-git" class="headerlink" title="更新 git"></a>更新 git</h2><ol><li>查看 git 版本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></li><li>查看 git 的位置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> git</span><br></pre></td></tr></table></figure></li><li>查看 mac 的系统环境<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li><li>修改环境目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi .zshrc</span><br></pre></td></tr></table></figure></li><li>安装新版 git<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 新增的 git 一般被安装在 usr/local/git 中 </span><br></pre></td></tr></table></figure></li></ol><h2 id="git-协作"><a href="#git-协作" class="headerlink" title="git 协作"></a>git 协作</h2><ol><li>查看所有远程仓库的名字<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show</span><br></pre></td></tr></table></figure></li><li>查看所有远程仓库的详细信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show remote_repository_name</span><br></pre></td></tr></table></figure></li><li>关联远程(过程理解)<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 与远程关联之后，本地有一个 master 分支，还有一个 origin/master 分支(追踪着远程版本库的 mater 分支)</span><br><span class="line"># 进行 git pull 操作，git 会将远程的修改拉到本地，同时将 origin/master 分支的 commit_id 对应到远程 master 最新的那次提交,如果这种合并是可以直接合并，git 会将远程的 master 分支直接合并到本地的 master 分支上。</span><br><span class="line"># 进行 git push 操作，git 会将本地的 origin/master 分支最新的 commit_id 指向本地的 master 分支上，将本地的 master 的分支内容 push 到远程</span><br></pre></td></tr></table></figure></li><li>查看远程分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -a <span class="comment"># 查看所有远程分支</span></span><br><span class="line">git branch -av <span class="comment"># 查看所有远程分支以及其最新的提交 commit_id</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="拉取代码操作"><a href="#拉取代码操作" class="headerlink" title="拉取代码操作"></a>拉取代码操作</h2><ol><li>拉取远程代码(克隆)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> repository_url_ssh</span><br></pre></td></tr></table></figure></li><li>拉取远程代码并重命名仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> repository_url_ssh repository_new_name</span><br></pre></td></tr></table></figure></li></ol><h2 id="git-pull-与-git-fetch-区别"><a href="#git-pull-与-git-fetch-区别" class="headerlink" title="git pull 与 git fetch 区别"></a>git pull 与 git fetch 区别</h2><ol><li>git fetch<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch <span class="comment"># 一定会成功的(不执行合并操作，仅仅是将远程的修改拉到本地，更新本地的 orgin/master)</span></span><br><span class="line">git merge orgin/master <span class="comment"># 将本地的 orgin/master 的修改 merge 到本地的 master 分支上</span></span><br></pre></td></tr></table></figure></li><li>git pull &#x3D;&#x3D; git fetch + git merge</li></ol><h2 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h2><ol><li>Gitflow</li><li>关于 Git 分支的最佳实践(基于 Git 分支的开发模型)</li></ol><ul><li>master 分支(生产发布)–生产发布分支，变化非常不频繁的一个分支</li><li>test 分支(测试)–供测试与产品人员使用的一个分支，变化不是特别频繁</li><li>develop 分支(开发)–频繁变化的一个分支</li><li>hotfix 分支(修复 bug 分支)–生产系统当中出现了紧急 bug ，用于紧急修复的分支</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第九讲 远程与 GitHub</title>
      <link href="/post/e986823a.html"/>
      <url>/post/e986823a.html</url>
      
        <content type="html"><![CDATA[<h1 id="远程与-GitHub"><a href="#远程与-GitHub" class="headerlink" title="远程与 GitHub"></a>远程与 GitHub</h1><h2 id="远程版本库-GitHub"><a href="#远程版本库-GitHub" class="headerlink" title="远程版本库(GitHub)"></a>远程版本库(GitHub)</h2><ol><li><a href="https://github.com/">Github 官网网址</a></li><li>注册账号: 利用邮箱注册账号(公共仓库)</li><li>将本地仓库推送到 GitHub 上</li></ol><ul><li>初始化仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init repository_name</span><br></pre></td></tr></table></figure></li><li>配置信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&#x27;name&#x27;</span></span><br><span class="line">git config --global user.email <span class="string">&#x27;email&#x27;</span></span><br></pre></td></tr></table></figure></li><li>修改配置的命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></table></figure></li><li>修改文件</li><li>将修改纳入暂存区</li><li>进行提交</li><li>本地版本库推送<ul><li>对 GitHub 进行配置</li><li>新建 README.md 进行说明，并提交到本地版本库</li><li>现在网页上创建一个远程仓库</li><li>推送到远程命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/repository_name.git <span class="comment"># 远程仓库 url</span></span><br><span class="line">git push -u origin master <span class="comment"># 将本地的 master 分支推送到远程</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第八讲 标签与 diff</title>
      <link href="/post/38d25409.html"/>
      <url>/post/38d25409.html</url>
      
        <content type="html"><![CDATA[<h1 id="标签与-diff"><a href="#标签与-diff" class="headerlink" title="标签与 diff"></a>标签与 diff</h1><h2 id="Git-标签"><a href="#Git-标签" class="headerlink" title="Git 标签"></a>Git 标签</h2><ol><li>新建标签，标签有两种：轻量级标签(lightweight)与带有附注标签(annotated)。</li><li>创建一个轻量级标签</li><li>创建一个带附注的标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.02 -m <span class="string">&#x27;release version&#x27;</span></span><br></pre></td></tr></table></figure></li><li>查看所有标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure></li><li>查找标签(模糊查找和精确查找)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -l <span class="string">&#x27;v1.0&#x27;</span></span><br></pre></td></tr></table></figure></li><li>删除标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d tag_name</span><br></pre></td></tr></table></figure></li><li>git blame 命令(定位文件修改的信息)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git blame file <span class="comment"># 可以查看该文件所有修改者信息</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><h3 id="系统自带的-diff"><a href="#系统自带的-diff" class="headerlink" title="系统自带的 diff"></a>系统自带的 diff</h3><ol><li>系统自带 diff 对比文件差别<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff file_1 file_2 </span><br></pre></td></tr></table></figure></li><li>详细系统自带 diff 对比文件差别<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff -u file_1 file_2</span><br></pre></td></tr></table></figure></li></ol><h3 id="Git-中-diff"><a href="#Git-中-diff" class="headerlink" title="Git 中 diff"></a>Git 中 diff</h3><ol><li>进行工作区与暂存区之间的文件差别对比: 暂存区文件作为原始文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff <span class="comment"># 比较的是暂存区与工作区文件之间的差别(将工作区文件修改，暂存区不动，进行差异性比较。)</span></span><br></pre></td></tr></table></figure></li><li>进行工作区与特定 commit_id 之间文件的差别比较: 版本库的文件作为原始文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff commit_id</span><br></pre></td></tr></table></figure></li><li>进行工作区与最新的提交之间文件的差别比较: 版本库的文件作为原始文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD </span><br></pre></td></tr></table></figure></li><li>进行暂存区与某一特定 commit_id 之间文件的差别比较: 版本库的文件作为原始文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached commit_id</span><br></pre></td></tr></table></figure></li><li>进行暂存区与最新的提交之间文件的差别比较: 版本库的文件作为原始文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第七讲 checkout 进阶与 stash</title>
      <link href="/post/935be61e.html"/>
      <url>/post/935be61e.html</url>
      
        <content type="html"><![CDATA[<h1 id="checkout-进阶与-stash"><a href="#checkout-进阶与-stash" class="headerlink" title="checkout 进阶与 stash"></a>checkout 进阶与 stash</h1><h2 id="checkout-进阶"><a href="#checkout-进阶" class="headerlink" title="checkout 进阶"></a>checkout 进阶</h2><ol><li>丢弃工作目录的变更<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- file</span><br></pre></td></tr></table></figure></li><li>从暂存区取消暂存<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD file</span><br></pre></td></tr></table></figure></li><li>checkout 切换分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout new_branch <span class="comment"># 切换分支</span></span><br><span class="line">git checkout -b new_branch <span class="comment"># 创建分支并切换分支</span></span><br></pre></td></tr></table></figure></li><li>利用 checkout 回退版本(HEAD 处于游离状态)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout commit_id <span class="comment"># 此时指针处于游离状态</span></span><br></pre></td></tr></table></figure></li><li>接着利用下一命令可以将游离的指针，移到创建分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b new_branch </span><br></pre></td></tr></table></figure></li><li>分支改名<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m branch_1 branch_2</span><br></pre></td></tr></table></figure></li></ol><h2 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h2><ol><li>将当前分支的所有修改临时保存起来<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure></li><li>查看所有保存状态<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure></li><li>提交临时保存说明<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash save <span class="string">&#x27;message&#x27;</span></span><br></pre></td></tr></table></figure></li><li>将临时保存状态恢复出来，并把这个保存状态删除掉<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash poo</span><br></pre></td></tr></table></figure></li><li>将临时保存状态恢复出来，不把这个保存状态删除掉<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply</span><br></pre></td></tr></table></figure></li><li>手动删除<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash drop stash@&#123;number&#125; </span><br></pre></td></tr></table></figure></li><li>从任意一个临时状态恢复<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply stash@&#123;number&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六讲 分支进阶与版本回退</title>
      <link href="/post/9551f68e.html"/>
      <url>/post/9551f68e.html</url>
      
        <content type="html"><![CDATA[<h1 id="分支进阶与版本回退"><a href="#分支进阶与版本回退" class="headerlink" title="分支进阶与版本回退"></a>分支进阶与版本回退</h1><h2 id="Fast-Forward"><a href="#Fast-Forward" class="headerlink" title="Fast-Forward"></a>Fast-Forward</h2><ol><li>如果可能，合并分支时 Git 会使用 fast-forward 模式。</li><li>在这种模式下，删除分支时会丢掉分支信息</li><li>合并时加上 –no-ff 参数会禁用 fast-forward ，这样会多出一个 commit id<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff new_branch</span><br></pre></td></tr></table></figure></li><li>查看 log<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph <span class="comment"># 以图形化的方式</span></span><br><span class="line">git <span class="built_in">log</span> --graph --abbrev-commit <span class="comment"># log 日志中 commit_id 信息简写</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><ol><li>把当前文件目录下的所有文件放入暂存区，然后提交<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit -am <span class="string">&#x27;add another line&#x27;</span> </span><br><span class="line"><span class="comment"># 上述命令等价于以下两命令之和</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;add another line&#x27;</span></span><br></pre></td></tr></table></figure></li><li>回退到上一版本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br><span class="line">git reset --hard HEAD~1 </span><br></pre></td></tr></table></figure></li><li>返回到某一版本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog <span class="comment"># 查看操作日志，查看版本的 commit_id</span></span><br><span class="line">git reset --hard commit_id <span class="comment"># 回退到特定版本</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五讲 .gitignore 与分支</title>
      <link href="/post/60c32a6b.html"/>
      <url>/post/60c32a6b.html</url>
      
        <content type="html"><![CDATA[<h1 id="gitignore-与分支"><a href="#gitignore-与分支" class="headerlink" title=".gitignore 与分支"></a>.gitignore 与分支</h1><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><ol><li>文件忽略: .gitignore<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*.a       # 忽略所有 .a 结尾的文件</span><br><span class="line">!lib.a    # 但 lib.a 除外</span><br><span class="line">/TODO     # 仅仅忽略项目根目录下的 TODO 文件，但不包括 subdir/TODO</span><br><span class="line">build/    # 忽略 build/ 目录下的所有文件</span><br><span class="line">doc/*.txt # 会忽略 doc/notes.txt ，但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure></li></ol><h2 id="通过网站生成常用的-gitignore-文件"><a href="#通过网站生成常用的-gitignore-文件" class="headerlink" title="通过网站生成常用的 .gitignore 文件"></a>通过网站生成常用的 .gitignore 文件</h2><ul><li><a href="!http://www.gitignore.io/">网站链接</a></li></ul><h2 id="一些重要的命令"><a href="#一些重要的命令" class="headerlink" title="一些重要的命令"></a>一些重要的命令</h2><ol><li>删除目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> mydir <span class="comment"># 不常用，要求目录是空目录</span></span><br><span class="line"><span class="built_in">rm</span> -rf mydir</span><br></pre></td></tr></table></figure></li><li>拼接两条命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> mydir &amp;&amp; <span class="built_in">cd</span> mydir <span class="comment"># 创建目录并进入该目录</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><ol><li>分支的一些概念</li></ol><ul><li>一个 commit 对象链：一条工作记录线(只有一个分支)</li><li>HEAD 指向的是当前分支</li><li>master(分支名)指向当前分支的最后一次提交</li><li>分支的合并形式：快进-fast forward</li><li>master 分支没有做修改，另一分支做修改，合并形式就是快进</li></ul><ol start="2"><li>查看当前版本库的所有分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></li><li>创建新的分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch new_branch(此时新分支和当前分支同步)</span><br></pre></td></tr></table></figure></li><li>切换分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout new_branch <span class="comment"># 两分支文件是独立的</span></span><br><span class="line">git checkout - <span class="comment"># 切换到之前的分支</span></span><br></pre></td></tr></table></figure></li><li>删除分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d new_branch </span><br></pre></td></tr></table></figure></li><li>注意事项：</li></ol><ul><li>不能删除当前所在分支</li><li>如果分支没有完全合并，要强行删除分支需要采用以下命令(要被删除的分支上做出了文件修改)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D new_branch </span><br></pre></td></tr></table></figure></li></ul><ol start="7"><li>创建分支并同时切换到新的分支上<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b new_branch</span><br></pre></td></tr></table></figure></li><li>分支的合并<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge new_branch <span class="comment"># 将 new_branch 的内容修改合并到 master 分支上</span></span><br></pre></td></tr></table></figure></li><li>显示当前所处分支最新的提交信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -v</span><br></pre></td></tr></table></figure></li><li>合并产生冲突(解决冲突)</li></ol><ul><li>原因：两个分支修改了同时修改同一个文件同一行(产生冲突)</li><li>无法自动解决冲突，手动利用工具解决</li><li>手动解决冲突后利用以下两个命令进行合并的提交</li><li>手动解决合并冲突后，当前分支如果和另一分支合并，则这次合并是 fast-forward<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add file <span class="comment"># 告诉 git 手动解决了冲突</span></span><br><span class="line">git commit -m <span class="string">&#x27;&#x27;</span> <span class="comment"># 提交这次合并的 commit message</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四讲 Git 添加、删除、修改与日志</title>
      <link href="/post/7df480e5.html"/>
      <url>/post/7df480e5.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-添加、删除、修改与日志"><a href="#Git-添加、删除、修改与日志" class="headerlink" title="Git 添加、删除、修改与日志"></a>Git 添加、删除、修改与日志</h1><h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><ol><li>创建文件(利用 echo)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span> &gt; file <span class="comment"># 文件重定向</span></span><br></pre></td></tr></table></figure></li><li>删除文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> file <span class="comment"># 先删除文件并把这次修改纳入暂存区。</span></span><br></pre></td></tr></table></figure></li><li>利用 git rm 删除文件可以利用以下两次命令恢复<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD file <span class="comment"># 将文件从暂存区回退到工作区</span></span><br><span class="line">git checkout -- file <span class="comment"># 将工作区的文件修改全部丢弃(未纳入暂存区的文件修改)</span></span><br></pre></td></tr></table></figure></li><li>删除文件(系统命令 rm)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> file <span class="comment"># 删除文件但并未把这次修改纳入暂存区</span></span><br></pre></td></tr></table></figure></li><li>利用系统命令 rm 删除文件可以利用以下一条命令恢复<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- file <span class="comment"># 将工作区的文件修改全部丢弃(未纳入暂存区的文件修改)</span></span><br></pre></td></tr></table></figure></li><li>利用 git mv 进行文件重命名: 将原文件删除并创建一个新的和原文件一样的文件并把这次修改纳入暂存区<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">mv</span> file file_1 <span class="comment"># 先将文件进行重命名并把这次修改纳入暂存区</span></span><br></pre></td></tr></table></figure></li><li>利用 git mv 进行文件重命名可以利用以下操作恢复<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD file</span><br><span class="line">git reset HEAD file_1</span><br><span class="line">git checkout -- file</span><br><span class="line"><span class="built_in">rm</span> file_1</span><br></pre></td></tr></table></figure></li><li>利用系统命令 mv 进行文件重命名: 将原文件删除并创建一个新的和原文件一样的文件并未把这次修改纳入暂存区<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> file file_1 <span class="comment"># 并未把这次修改纳入暂存区</span></span><br></pre></td></tr></table></figure></li><li>利用系统命令 mv 进行文件重命名可以利用以下操作恢复<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- file</span><br><span class="line"><span class="built_in">rm</span> file_1</span><br></pre></td></tr></table></figure></li><li>将当前目录以及当前目录子目录的所有文件同时纳入暂存区<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li><li>commit message 提交错误进行修正<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend -m <span class="string">&#x27;message_1&#x27;</span> <span class="comment"># 修正上一次的 commit message</span></span><br></pre></td></tr></table></figure></li><li>查看日志<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -n <span class="comment"># 查看最近 n 条日志</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline 日志以一行的简单方式呈现</span><br></pre></td></tr></table></figure></li><li>获取帮助<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span> config</span><br><span class="line">git config --<span class="built_in">help</span></span><br><span class="line">man git-config</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三讲 Git 重要命令操练</title>
      <link href="/post/46863b15.html"/>
      <url>/post/46863b15.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-重要命令操练"><a href="#Git-重要命令操练" class="headerlink" title="Git 重要命令操练"></a>Git 重要命令操练</h1><h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><ol><li>获得版本库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment"># 版本库初始化(本地创建 git 版本库)</span></span><br><span class="line">git <span class="built_in">clone</span> <span class="comment"># 克隆远程版本库</span></span><br></pre></td></tr></table></figure></li><li>版本管理<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add <span class="comment"># 将已修改的文件从工作区纳入到暂存区</span></span><br><span class="line">git commit <span class="comment"># 将暂存区文件提交到 git 本地版本库</span></span><br><span class="line">git <span class="built_in">rm</span> <span class="comment"># 删除文件</span></span><br></pre></td></tr></table></figure></li><li>查看信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span> <span class="comment"># 查看 git 命令使用</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment"># 查看日志</span></span><br><span class="line">git diff <span class="comment"># 查看文件不同状态的差异</span></span><br></pre></td></tr></table></figure></li><li>远程协作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="comment"># 将远程版本库当中的文件拉到本地</span></span><br><span class="line">git push <span class="comment"># 将本地版本库当中的版本内容推送到远程</span></span><br></pre></td></tr></table></figure></li><li>查看工作区状态<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status </span><br></pre></td></tr></table></figure></li><li>将文件从暂存区回退到工作区<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached file</span><br></pre></td></tr></table></figure></li><li>将文件从暂存区提交到本地版本库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;提交消息&#x27;</span></span><br></pre></td></tr></table></figure></li><li>查看提交历史</li></ol><ul><li>Git 的提交(commit id)是一个在摘要值。这个摘要值实际是 sha1 计算出来的<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure></li></ul><ol start="9"><li>配置信息</li></ol><ul><li>对于 user.name 和 user.email 来说，有三个地方可以设置<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/etc/gitconfig(几乎不会使用)</span><br><span class="line">git config --system</span><br><span class="line"></span><br><span class="line">~/.gitconfig(很常用) # 针对用户(优先级其次)</span><br><span class="line">git config --global</span><br><span class="line"></span><br><span class="line">.git/config # 针对于特定项目的(优先级最高)</span><br><span class="line">git config --local</span><br></pre></td></tr></table></figure></li><li>查看配置信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></li><li>删除配置信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> --<span class="built_in">unset</span> user.name <span class="comment"># 针对特定项目的</span></span><br></pre></td></tr></table></figure></li><li>查看配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> config <span class="comment"># 查看针对特定项目的配置信息文件</span></span><br><span class="line"><span class="built_in">cat</span> ~/.gitconfig <span class="comment"># 查看针对用户的配置信息文件</span></span><br></pre></td></tr></table></figure></li><li>丢弃在工作区所做的修改<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- file</span><br></pre></td></tr></table></figure></li><li>完全修改文件内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;weclome&#x27;</span> &gt; file <span class="comment"># 文件重定向</span></span><br></pre></td></tr></table></figure></li><li>追加文件内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;weclome&#x27;</span> &gt;&gt; file</span><br></pre></td></tr></table></figure></li><li>从将文件从暂存区回退到工作区<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD file</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二讲 Git 入门指引</title>
      <link href="/post/16f9fd9.html"/>
      <url>/post/16f9fd9.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-入门指引"><a href="#Git-入门指引" class="headerlink" title="Git 入门指引"></a>Git 入门指引</h1><h2 id="Git-简史"><a href="#Git-简史" class="headerlink" title="Git 简史"></a>Git 简史</h2><ol><li>Linux 内核开源项目有着位数众多的参与者。一开始整个项目组使用 BitKeeper 来管理和维护代码。2005 年，BitKeeper 不再能免费使用，这就迫使 Linux 开源社区开发一套属于自己的版本控制系统。</li><li>自诞生于 2005 年以来，Git 日臻成熟完善，它的速度飞快，极其适合管理大型项目，它还有着令人难以置信的非线性分支管理系统，可以应付各种复杂的项目开发需求。</li><li>众多的开源、非开源项目已经逐步由 SVN 迁移到 Git 。</li></ol><h2 id="CVS、SVN-与-Git"><a href="#CVS、SVN-与-Git" class="headerlink" title="CVS、SVN 与 Git"></a>CVS、SVN 与 Git</h2><ol><li>CVCS: 集中式版本控制系统</li><li>DVCS: 分布式版本控制系统</li><li>有了 Git ，编程真正成了一种乐趣。</li></ol><h2 id="Git、GitHub-与-GitLab"><a href="#Git、GitHub-与-GitLab" class="headerlink" title="Git、GitHub 与 GitLab"></a>Git、GitHub 与 GitLab</h2><ol><li>Git 是一个版本控制软件</li><li>GitHub 与 GitLab 都是用于管理版本的服务端软件</li><li>GitHub 提供免费服务(代码需公开)以及付费服务(代码私有)</li><li>GitLab 用于在企业内部管理 Git 版本库，功能上类似于 GitHub</li></ol><h2 id="Git-设计目标"><a href="#Git-设计目标" class="headerlink" title="Git 设计目标"></a>Git 设计目标</h2><ol><li>快速</li><li>简单(学习曲线陡峭)</li><li>高效存储</li><li>完全分布</li><li>满足大规模项目需要</li></ol><h2 id="Git-优点"><a href="#Git-优点" class="headerlink" title="Git 优点"></a>Git 优点</h2><ol><li>本地建立版本库</li><li>本地版本控制</li><li>多主机异地协同工作</li><li>重写提交说明</li><li>有后悔药可以吃</li><li>更好用的提交列表</li><li>更好的差异比较</li><li>更完善的分支系统</li><li>速度极快</li></ol><h2 id="Git-工作模式"><a href="#Git-工作模式" class="headerlink" title="Git 工作模式"></a>Git 工作模式</h2><ol><li>版本库初始化</li></ol><ul><li>个人计算机从版本服务器同步</li></ul><ol start="2"><li>操作</li></ol><ul><li>90% 以上的操作在个人计算机上</li><li>添加文件</li><li>修改文件</li><li>提交变更</li><li>查看版本历史等</li></ul><ol start="3"><li>版本库同步</li></ol><ul><li>将本地修改推送到版本服务器</li></ul><h2 id="Git-基础"><a href="#Git-基础" class="headerlink" title="Git 基础"></a>Git 基础</h2><ol><li>直接记录快照，而非差异比较</li><li>近乎所有操作都在本地执行</li><li>时刻保持数据完整性</li><li>多数操作仅添加操作</li><li>文件的三种状态</li></ol><ul><li>modified: 已修改</li><li>staged: 已暂存</li><li>committed: 已提交</li></ul><h2 id="Git-文件状态"><a href="#Git-文件状态" class="headerlink" title="Git 文件状态"></a>Git 文件状态</h2><ol><li>Git 文件</li></ol><ul><li>已被版本库管理的文件</li></ul><ol start="2"><li>已修改</li></ol><ul><li>在工作目录修改 Git 文件</li></ul><ol start="3"><li>已暂存</li></ol><ul><li>对已修改的文件执行 Git 暂存操作，将文件存入暂存区</li></ul><ol start="4"><li>已提交</li></ol><ul><li>将已暂存的文件执行 Git 提交操作，将文件存入版本库</li></ul><h2 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h2><ol><li>Linux: Ubuntu<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></li><li>Mac</li></ol><ul><li>安装命令行工具：如已安装 Xcode ，命令行工具会在首次启动 Xcode 时提示安装</li><li>安装 Homebrew<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>Windows</li></ol><ul><li>安装 <a href="https://gitforwindows.org/">msysGit</a></li><li>完成安装之后，就可以使用命令行的 git 工具了，另外还有一个图形界面的 Git 项目管理工具。</li><li>建议使用 Git 命令行，方便又快捷，GUI 反而繁琐。</li><li>如果需要使用 GUI ，推荐使用 SourceTree ，拥有 Mac 与 Windows 版本；此外，Windows 下还可以使用 TortoiseGit 。</li></ul><h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><ul><li>获得版本库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment"># 版本库初始化(本地创建 git 版本库)</span></span><br><span class="line">git <span class="built_in">clone</span> <span class="comment"># 克隆远程版本库</span></span><br></pre></td></tr></table></figure></li><li>版本管理<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add <span class="comment"># 将已修改的文件从工作区纳入到暂存区</span></span><br><span class="line">git commit <span class="comment"># 将暂存区文件提交到 git 本地版本库</span></span><br><span class="line">git <span class="built_in">rm</span> <span class="comment"># 删除文件</span></span><br></pre></td></tr></table></figure></li><li>查看信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span> <span class="comment"># 查看 git 命令使用</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment"># 查看日志</span></span><br><span class="line">git diff <span class="comment"># 查看文件不同状态的差异</span></span><br></pre></td></tr></table></figure></li><li>远程协作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="comment"># 将远程版本库当中的文件拉到本地</span></span><br><span class="line">git push <span class="comment"># 将本地版本库当中的版本内容推送到远程</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homebrew </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一讲 课程内容概述与准备</title>
      <link href="/post/8f4877b8.html"/>
      <url>/post/8f4877b8.html</url>
      
        <content type="html"><![CDATA[<h1 id="课程内容概述与准备"><a href="#课程内容概述与准备" class="headerlink" title="课程内容概述与准备"></a>课程内容概述与准备</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul><li><a href="http://www.git-scm.com/">Git 官网</a></li><li>常见 Linux 命令介绍</li><li>Git 在各种平台下的安装和配置</li><li>分布式与集中式版本控制系统的差别</li><li>缓存区、工作区与 Git 的提交</li><li>版本回退</li><li>修改与撤销修改、文件添加与删除</li><li>Git 对象类型与索引</li><li>Git 分支</li><li>如何创建、切换与删除分支</li><li>Git 分支在项目开发中的作用</li><li>Git 分支在工程化项目中的最佳实践</li><li>分支常见重要命令详解</li><li>Git merge</li><li>Git 冲突解决策略</li><li>HEAD 详解</li><li>Git commit 修改详情</li><li>远程版本库的介绍</li><li>如何使用远程版本库</li><li>Git push、pull、fetch 使用注意事项</li><li>Git 合并的基本原则</li><li>Git 别名、config 文件详情</li><li>Git tag 详情</li><li>如何创建与推送 tag</li><li>Git feature 分支详解</li><li>Git subtree 详解</li><li>Git subtree的使用方式详解</li><li>.gitignore 的正确使用方式</li><li>Git 私服 Gitlab 的搭建方法</li><li>在公司内部使用 Gitlab 作为版本控制服务器。</li><li>Gitlab 使用详情</li><li>如何使用 Gitlab 管理项目分组、用户角色</li><li>Git issue 与提交使用技巧</li><li>Github 使用方法介绍</li><li>.gitignore 最佳实践</li></ul><h2 id="课程准备"><a href="#课程准备" class="headerlink" title="课程准备"></a>课程准备</h2><h3 id="Mac-电脑开发环境"><a href="#Mac-电脑开发环境" class="headerlink" title="Mac 电脑开发环境"></a>Mac 电脑开发环境</h3><ul><li><p>Mac 自带了 Git</p></li><li><p>Mac 终端</p></li><li><p>查看 git 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></li><li><p>bash 功能过于单一，安装 oh-my-zsh</p></li><li><p>下载 iterm2</p><ul><li><a href="http://www.iterms.com/">官网下载</a></li><li>安装完成后，在 &#x2F;bin 目录下会多出一个 zsh 的文件</li><li>原生的 bash 环境配置文件 .bash_profile 迁移到 .zshrc 文件中，修改环境配置可以在 .zshrc 文件中修改</li></ul></li><li><p>Mac 系统默认使用 bash 作为终端，可以使用命令修改默认使用 zsh 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></li><li><p>如果想修改回默认 bash ，同样使用 chsh 命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>oh-my-zsh 的 curl 安装方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>oh-my-zsh 的 wget 安装方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="常见-Linux-命令"><a href="#常见-Linux-命令" class="headerlink" title="常见 Linux 命令"></a>常见 Linux 命令</h2><ol><li>创建文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdkir mygit</span><br></pre></td></tr></table></figure></li><li>进入桌面文件夹<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Desktop</span><br></pre></td></tr></table></figure></li><li>回到上一层目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure></li><li>回到之前目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure></li><li>回退主目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure></li><li>显示当前路径<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure></li><li>显示当前路径下的文件内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure></li><li>显示当前路径下的所有文件内容(包括隐藏文件)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -al</span><br></pre></td></tr></table></figure></li><li>将光标移到行头<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">control a(键盘)</span><br></pre></td></tr></table></figure></li><li>将光标移到行尾<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">control e(键盘)</span><br></pre></td></tr></table></figure></li><li>抛弃错误命令<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">control c(键盘)</span><br></pre></td></tr></table></figure></li><li>新建文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> test.txt</span><br></pre></td></tr></table></figure></li><li>vi 打开和修改文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi test.txt</span><br></pre></td></tr></table></figure></li><li>vi 下的一些常用命令</li></ol><ul><li>显示行号<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">：set number</span><br></pre></td></tr></table></figure></li><li>进入插入模式<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i(键盘)</span><br></pre></td></tr></table></figure></li><li>退出插入模式<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Esc(键盘)</span><br></pre></td></tr></table></figure></li><li>保存并退出文件(插入模式)<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Esc(键盘)</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure></li><li>往下滚屏<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">control f(键盘)</span><br></pre></td></tr></table></figure></li><li>往上滚屏<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">control b(键盘)</span><br></pre></td></tr></table></figure></li><li>定位到最后一行<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shift g(键盘)</span><br></pre></td></tr></table></figure></li><li>定位到某一行<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: number(键盘)</span><br></pre></td></tr></table></figure></li><li>删除某一行<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: number d d (键盘)</span><br></pre></td></tr></table></figure></li><li>光标移到行尾并切换到插入模式<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shift a(键盘)</span><br></pre></td></tr></table></figure></li></ul><ol start="15"><li>查看文件内容<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt</span><br></pre></td></tr></table></figure></li><li>复制文件、粘贴文件<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp test.txt test2.txt</span><br></pre></td></tr></table></figure></li><li>清屏(两种方式)<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br><span class="line">control l(快捷键)</span><br></pre></td></tr></table></figure></li><li>文件重命名<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> test2.txt text3.txt</span><br></pre></td></tr></table></figure></li><li>文件删除<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> test3.txt</span><br></pre></td></tr></table></figure></li><li>命令使用具体方法查询(查看帮助文档)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man <span class="built_in">rm</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 使用 iTerm2 进行远程服务器文件的上传下载</title>
      <link href="/post/67502ae4.html"/>
      <url>/post/67502ae4.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>在 Windows 下面使用 xShell 时，经常使用 sz 命令进行文件的上传下载非常方便。</li><li>在 Mac 下面就不能直接使用了，需要进行配置才能使用这么方便的功能。</li></ol><h2 id="安装-lrzsz"><a href="#安装-lrzsz" class="headerlink" title="安装 lrzsz"></a>安装 lrzsz</h2><ul><li>安装 lrzsz<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install lrzsz</span><br></pre></td></tr></table></figure></li><li>安装完成后检查是否存在<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -alh /usr/local/bin/sz</span><br></pre></td></tr></table></figure></li><li>lrzsz 是对 zmodem 协议实现的软件包</li></ul><h2 id="配置-iTerm2-属性"><a href="#配置-iTerm2-属性" class="headerlink" title="配置 iTerm2 属性"></a>配置 iTerm2 属性</h2><ul><li><p>拉取<a href="https://gitcode.net/mirrors/mmastrac/iterm2-zmodem?utm_source=csdn_github_accelerator">相关仓库</a> </p></li><li><p>上面仓库主要文件如下： </p><ul><li>iterm2-recv-zmodem.sh </li><li>iterm2-send-zmodem.sh</li></ul></li><li><p>将两个脚本 copy 到 &#x2F;usr&#x2F;local&#x2F;bin&#x2F; 文件夹下面 </p></li><li><p>设置一下两个脚本的权限，一般 chmod 777 就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 777 /usr/local/bin/iterm2-*</span><br></pre></td></tr></table></figure></li><li><p>设置 iterm2 的 Tirgger 特性， profiles -&gt; default -&gt; editProfiles -&gt; Advanced 中的 Tirgger</p></li><li><p>添加两条 trigger，分别设置 Regular expression，Action，Parameters，Instant 如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.第一条</span><br><span class="line">        Regular expression: rz waiting to receive.\*\*B0100</span><br><span class="line">        Action: Run Silent Coprocess</span><br><span class="line">        Parameters: /usr/local/bin/iterm2-send-zmodem.sh</span><br><span class="line">        Instant: checked</span><br><span class="line">2.第二条</span><br><span class="line">        Regular expression: \*\*B00000000000000</span><br><span class="line">        Action: Run Silent Coprocess</span><br><span class="line">        Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</span><br><span class="line">        Instant: checked</span><br></pre></td></tr></table></figure></li><li><p>添加过程如下：</p><p><img src="/img/loading.gif" data-original="../../img/posts/mac/lrzsz_01.png" width = 98% height = 100% /><p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/weixin_34067980/article/details/91773253">iTerm2 使用 zmodem 协议上传下载文件</a></li><li><a href="https://blog.csdn.net/weixin_34115824/article/details/88036529">在 Mac 上使用 iTerm2 进行 sz 和 rz 命令进行远程服务器文件的上传下载功能</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> iTerm2 </tag>
            
            <tag> lrzsz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 平台安装 MySQL</title>
      <link href="/post/59e50a26.html"/>
      <url>/post/59e50a26.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载-mysql"><a href="#下载-mysql" class="headerlink" title="下载 mysql"></a>下载 mysql</h2><ul><li><a href="https://dev.mysql.com/downloads/mysql/">官方网站</a></li></ul><p><img src="/img/loading.gif" data-original="../../img/posts/mac/mysql_01.png" width = 90% height = 100% /><p><ul><li>双击打开下载的 mysql-8.0.22-macos10.15-x86_64.dmg 安装包</li></ul><p><img src="/img/loading.gif" data-original="../../img/posts/mac/mysql_02.png" width = 90% height = 100% /><p><ul><li>一路点击继续，直到以下画面</li></ul><p><img src="/img/loading.gif" data-original="../../img/posts/mac/mysql_03.png" width = 90% height = 100% /><p><ul><li>选择 Use Legacy Password Encryption</li><li>此处需要你设置一个密码，记住这个密码是你日后登录 mysql 的密码</li></ul><p><img src="/img/loading.gif" data-original="../../img/posts/mac/mysql_04.png" width = 90% height = 100% /><p><ul><li>完成之后，打开系统偏好设置，会发现下面多出了 mysql 的小图标 </li><li>双击打开 mysql 的小图标 </li><li>如果显示 Start MySQL Server，表示现在是停止运行的，点击按钮即可运行 mysql</li><li>如果显示显示 Stop MySQL Server，表示现在是正在运行的，点击按钮即可停止 mysql</li></ul><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ul><li>修改 .zshrc 文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure></li><li>添加环境变量<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Path to your mysql installation.</span><br><span class="line">export PATH=$PATH:/usr/local/mysql/bin</span><br></pre></td></tr></table></figure></li><li>使更改立即生效<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li></ul><h2 id="登录-mysql"><a href="#登录-mysql" class="headerlink" title="登录 mysql"></a>登录 mysql</h2><ul><li>登录 mysql<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li><li>输入密码，即可进入 mysql 数据库操作</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/mirajay_yeah/article/details/110388507">转载: Mac 安装 mysql (极简)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 平台安装 Anaconda 教程</title>
      <link href="/post/3bae1910.html"/>
      <url>/post/3bae1910.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>Anaconda 指的是一个开源的 Python 发行版本，其包含了 conda、Python 等 180 多个科学包及其依赖项。</li><li>因为包含了大量的科学包，Anaconda 的下载文件比较大(约 531 MB)，如果只需要某些包，或者需要节省带宽或存储空间，也可以使用 Miniconda 这个较小的发行版(仅包含 conda 和 Python)。</li><li>Anaconda 包括 Conda、Python 以及一大堆安装好的工具包，比如：Numpy、Pandas 等。</li><li>Miniconda 包括 Conda、Python。</li><li>conda 是一个开源的包、环境管理器，可以用于在同一个机器上安装不同版本的软件包及其依赖，并能够在不同的环境之间切换。</li></ol><h2 id="安装-Anaconda"><a href="#安装-Anaconda" class="headerlink" title="安装 Anaconda"></a>安装 Anaconda</h2><ul><li><a href="https://docs.anaconda.com/anaconda/install/">Anaconda 官方下载网址</a></li><li>选择 mac 版本，下载好软件包后一路默认安装，dmg 安装会自动添加环境变量</li></ul><h2 id="Anaconda-换源"><a href="#Anaconda-换源" class="headerlink" title="Anaconda 换源"></a>Anaconda 换源</h2><ul><li>打开 Anaconda 软件，初始化后，会在用户目录下生成 .condarc 文件</li><li>修改 .condarc 文件，更换清华镜像源<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure></li><li>安装完 Anaconda，终端默认进入 Anaconda 中的 base 环境，这里取消默认设置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --<span class="built_in">set</span> auto_activate_base <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Anaconda-基本命令"><a href="#Anaconda-基本命令" class="headerlink" title="Anaconda 基本命令"></a>Anaconda 基本命令</h2><ul><li>查看当前的 conda 版本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure></li><li>常看当前所有的环境<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure></li><li>创建新的 Python 环境<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n env_name python=3.6.2</span><br></pre></td></tr></table></figure></li><li>切换环境<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate env_name</span><br></pre></td></tr></table></figure></li><li>退出环境<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate env_name</span><br></pre></td></tr></table></figure></li><li>移除环境<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n env_name --all</span><br></pre></td></tr></table></figure></li></ul><h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><ul><li>查看当前环境的包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure></li><li>查看指定 xxx 环境下的包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list -n xxx</span><br></pre></td></tr></table></figure></li><li>查找包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda search xxx</span><br></pre></td></tr></table></figure></li><li>更新包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update xxx</span><br></pre></td></tr></table></figure></li><li>更新所有库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update --all</span><br></pre></td></tr></table></figure></li><li>更新 conda 自身<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></figure></li><li>更新 anaconda 自身<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update anaconda</span><br></pre></td></tr></table></figure></li><li>安装包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install xxx</span><br></pre></td></tr></table></figure></li><li>也可指定安装的环境<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -n env_name xxx</span><br></pre></td></tr></table></figure></li><li>卸载包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove xxx</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/qq_31573519/article/details/82845515">Mac 安装 anaconda 及其基本命令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 平台安装 Go 环境</title>
      <link href="/post/67a9606f.html"/>
      <url>/post/67a9606f.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><ul><li><a href="https://go.dev/dl/">官方源下载</a> </li><li><a href="https://studygolang.com/dl">国内源下载</a></li><li>直接下一步安装即可</li></ul><h2 id="GO111MODULE-设置"><a href="#GO111MODULE-设置" class="headerlink" title="GO111MODULE 设置"></a>GO111MODULE 设置</h2><ul><li>设置 GO111MODULE<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置-GOPATH"><a href="#配置-GOPATH" class="headerlink" title="配置 GOPATH"></a>配置 GOPATH</h2><ul><li>查看具体信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">env</span></span><br></pre></td></tr></table></figure></li><li>在用户目录(&#x2F;Users&#x2F;mac)下，新建 go 目录，再在下面建立 bin pkg src 文件夹</li><li>修改 .zshrc 文件，添加环境变量<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1) vim ~/.zshrc</span><br><span class="line">(2) 添加</span><br><span class="line">export GOPATH=/Users/用户名/go</span><br><span class="line">(3) 使更改立即生效</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.jianshu.com/p/082549479701">Mac 安装 go 语言</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 平台 java 开发环境搭建教程</title>
      <link href="/post/87aba1ef.html"/>
      <url>/post/87aba1ef.html</url>
      
        <content type="html"><![CDATA[<h2 id="查看是否安装"><a href="#查看是否安装" class="headerlink" title="查看是否安装"></a>查看是否安装</h2><ul><li>在安装 JDK 之前，先查看下自己电脑是否已经安装了 JDK</li><li>打开终端，输入 java –version 并回车<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java 17.0.1 2021-10-19 LTS</span><br><span class="line">Java(TM) SE Runtime Environment (build 17.0.1+12-LTS-39)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 17.0.1+12-LTS-39, mixed mode, sharing)</span><br></pre></td></tr></table></figure></li><li>从上图中可以看出我们已安装了 JDK 17</li><li>如果这个版本是你需要的版本，可直接看如何配置 Java 开发环境</li></ul><h2 id="安装-Java"><a href="#安装-Java" class="headerlink" title="安装 Java"></a>安装 Java</h2><ul><li><a href="https://www.oracle.com/java/technologies/downloads/">官网下载</a></li><li>JDK 安装</li><li>MAC 系统 JDK 安装是很简单的，一路下一步就 ok 了</li></ul><h2 id="配置-Java-开发环境"><a href="#配置-Java-开发环境" class="headerlink" title="配置 Java 开发环境"></a>配置 Java 开发环境</h2><ul><li>MAC 默认安装目录为 &#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;</li><li>编辑 ～&#x2F;.zshrc 文件，添加环境变量(前提：事先装了 oh-my-zsh)</li></ul><p><img src="/img/loading.gif" data-original="../../img/posts/mac/java_01.png" width = 100% height = 100% /><p><ul><li>使更改立即生效<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li></ul><h2 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h2><ul><li>可以用文本编辑器写程序，保存为后缀为 Test.java 的 Java 文件，进行程序测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String args[])</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, java!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.cnblogs.com/wyaokai/p/12520494.html">MAC 系统 java 开发环境搭建教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 平台给 Github 配置 SSH</title>
      <link href="/post/ff91de0c.html"/>
      <url>/post/ff91de0c.html</url>
      
        <content type="html"><![CDATA[<h2 id="配置本地-Git"><a href="#配置本地-Git" class="headerlink" title="配置本地 Git"></a>配置本地 Git</h2><ul><li>打开终端 </li><li>Git 全局设置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;github 账户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;注册 github 所用邮箱&quot;</span></span><br></pre></td></tr></table></figure></li><li>查看配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h2><ul><li><p>主目录下(&#x2F;Users&#x2F;用户名)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -al</span><br></pre></td></tr></table></figure></li><li><p>如果不存在 .ssh 文件夹，新建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> .ssh</span><br></pre></td></tr></table></figure></li><li><p>切换文件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .ssh</span><br></pre></td></tr></table></figure></li><li><p>生成公私钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;注册 github 所用邮箱&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>一路回车，出现如下画面表示成功</p><p><img src="/img/loading.gif" data-original="../../img/posts/mac/ssh_01.png" width = 30% height = 30% /><p></li><li><p>查看公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>复制密钥，进入 github ，然后点击 Setting -&gt; SSh and GPG keys -&gt; New SSH key ，将复制 id_rsa.pub 内容粘贴上去即可</p></li><li><p>验证是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> Github </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="/post/d98ef1d2.html"/>
      <url>/post/d98ef1d2.html</url>
      
        <content type="html"><![CDATA[<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><ul><li><a href="https://leetcode-cn.com/problems/two-sum/">题目传送门</a></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="方法一：暴力破解"><a href="#方法一：暴力破解" class="headerlink" title="方法一：暴力破解"></a>方法一：暴力破解</h4><h5 id="个人解"><a href="#个人解" class="headerlink" title="个人解"></a>个人解</h5><ul><li><p>关键点：用两层循环进行解题</p></li><li><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        result = []</span><br><span class="line">        loop = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">for</span> j, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">                <span class="keyword">if</span> i != j:</span><br><span class="line">                    <span class="keyword">if</span> num + v == target:</span><br><span class="line">                        result.append(i)</span><br><span class="line">                        result.append(j)</span><br><span class="line">                        loop = <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> loop:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    resultSlice := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    Loop:</span><br><span class="line">    <span class="comment">// 1. 循环遍历 nums</span></span><br><span class="line">    <span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="comment">// 2. 循环遍历 nums</span></span><br><span class="line">        <span class="keyword">for</span> j, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">            <span class="comment">// 3. 判断元素是否重复</span></span><br><span class="line">            <span class="keyword">if</span> i != j &#123;</span><br><span class="line">                <span class="comment">// 4. 两数之和等于目标值</span></span><br><span class="line">                <span class="keyword">if</span> num + v == target &#123;</span><br><span class="line">                    resultSlice = <span class="built_in">append</span>(resultSlice, i)</span><br><span class="line">                    resultSlice = <span class="built_in">append</span>(resultSlice, j)</span><br><span class="line">                    <span class="keyword">break</span> Loop</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultSlice</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>个人总结： </p><ul><li>Python3 版本提交结果 ✅ ，执行用时 6524 ms，内存消耗 15.5 MB。</li><li>Golang 版本提交结果 ✅ ，执行用时 48 ms，内存消耗 3.4 MB。</li><li>可改进点：第二次遍历的时候，应该从 i + 1 元素开始。</li></ul></li></ul><h5 id="官方解"><a href="#官方解" class="headerlink" title="官方解"></a><a href="https://leetcode-cn.com/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-solution/">官方解</a></h5><ul><li><p>关键点：</p><ul><li>最容易想到的方法是枚举数组中的每一个数 x ，寻找数组中是否存在 target - x 。 </li><li>当我们使用遍历整个数组的方式寻找 target - x 时，需要注意到每一个位于 x 之前的元素都已经和 x 匹配过，因此不需要再进行匹配。 </li><li>而每一个元素不能被使用两次，所以我们只需要在 x 后面的元素中寻找 target - x 。</li></ul></li><li><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] == target:</span><br><span class="line">                    <span class="keyword">return</span> [i, j]</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i, x := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(nums); j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> x+nums[j] == target &#123;</span><br><span class="line">                <span class="keyword">return</span> []<span class="type">int</span>&#123;i, j&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复杂度分析</p><ul><li>时间复杂度：O(N^2)，其中 N 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</li><li>空间复杂度：O(1)。</li></ul></li></ul><h4 id="方法二：哈希表"><a href="#方法二：哈希表" class="headerlink" title="方法二：哈希表"></a>方法二：哈希表</h4><h5 id="个人解-1"><a href="#个人解-1" class="headerlink" title="个人解"></a>个人解</h5><ul><li><p>关键点：用哈希表进行解题</p></li><li><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        records = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="comment"># 用枚举更方便，就不需要通过索引再去取当前位置的值</span></span><br><span class="line">        <span class="keyword">for</span> idx, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> target - val <span class="keyword">not</span> <span class="keyword">in</span> records:</span><br><span class="line">                records[val] = idx</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> [records[target - val], idx] <span class="comment"># 如果存在就返回字典记录索引和当前索引</span></span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    resultSlice := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    sliceMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        sliceMap[num] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> j, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := sliceMap[target - v]; ok &#123;</span><br><span class="line">            <span class="keyword">if</span> j == sliceMap[target - v] &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            resultSlice = <span class="built_in">append</span>(resultSlice, j)</span><br><span class="line">            resultSlice = <span class="built_in">append</span>(resultSlice, sliceMap[target - v])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultSlice</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>个人总结：</p><ul><li>Python3 版本提交结果 ✅ ，执行用时 28 ms，内存消耗 16 MB。 </li><li>Golang 版本提交结果 ✅ ，执行用时 8 ms，内存消耗 5.4 MB。 </li><li>可改进点：哈希表添加元素和匹配可以同时进行。</li></ul></li></ul><h5 id="官方解-1"><a href="#官方解-1" class="headerlink" title="官方解"></a><a href="https://leetcode-cn.com/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-solution/">官方解</a></h5><ul><li><p>关键点：</p><ul><li>注意到方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。 </li><li>因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。 </li><li>使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O(N^2) 降低到 O(1)。 </li><li>这样我们创建一个哈希表，对于每一个 x ，我们首先查询哈希表中是否存在 target - x ，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。</li></ul></li><li><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        hashtable = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> target - num <span class="keyword">in</span> hashtable:</span><br><span class="line">                <span class="keyword">return</span> [hashtable[target - num], i]</span><br><span class="line">            hashtable[nums[i]] = i</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    hashTable := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i, x := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> p, ok := hashTable[target-x]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="type">int</span>&#123;p, i&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        hashTable[x] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复杂度分析</p><ul><li>时间复杂度：O(N)，其中 N 是数组中的元素数量。对于每一个元素 x ，我们可以 O(1) 地寻找 target - x 。 </li><li>空间复杂度：O(N)，其中 N 是数组中的元素数量。主要为哈希表的开销。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 平台配置 iTerm2 + oh-my-zsh</title>
      <link href="/post/9ca5bb98.html"/>
      <url>/post/9ca5bb98.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mac-安装-iTerm2"><a href="#Mac-安装-iTerm2" class="headerlink" title="Mac 安装 iTerm2"></a>Mac 安装 iTerm2</h2><ul><li>下载 iTerm2</li><li><a href="https://www.iterm2.com/index.html">官方链接</a></li></ul><h2 id="Mac-安装-oh-my-zsh"><a href="#Mac-安装-oh-my-zsh" class="headerlink" title="Mac 安装 oh-my-zsh"></a>Mac 安装 oh-my-zsh</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>Mac 系统一般预置安装了 zsh，如果当前默认 shell 是 bash，则修改默认 shell，如果默认的 shell 是 zsh，则不改变<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></li><li>你的 Mac 上需要安装 git</li></ul><h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><ul><li>克隆代码<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure></li><li>备份已有的 .zshrc 文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> ~/.zshrc ~/.zshrc.bak</span><br></pre></td></tr></table></figure></li><li>新建一个 zsh 的配置文件，可以拷贝一份已有的模板文件来创建 zsh 的配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure></li><li>重新打开一个终端窗口，它将自动开启加载 oh-my-zsh 配置的 zsh</li><li>以上四步结束后，可能会存在 zsh 目录权限问题，解决问题如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 755 /usr/local/share/zsh</span><br><span class="line"><span class="built_in">chmod</span> 755 /usr/local/share/zsh/site-functions</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><h4 id="命令高亮插件"><a href="#命令高亮插件" class="headerlink" title="命令高亮插件"></a>命令高亮插件</h4><ul><li>下载高亮插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting ~/.zsh/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></li><li>编辑配置文件，使用插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure></li><li>在 .zshrc 文件的 plugins 后面加入 zsh-syntax-highlighting 插件名</li><li>重启终端</li></ul><h4 id="命令提示插件"><a href="#命令提示插件" class="headerlink" title="命令提示插件"></a>命令提示插件</h4><ul><li>下载命令提示插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions</span><br></pre></td></tr></table></figure></li><li>编辑配置文件，使用插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure></li><li>在 .zshrc 文件的 plugins 后面加入 zsh-autosuggestions 插件名</li><li>重启终端</li></ul><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><h3 id="更换-zsh-主题为-Dracula"><a href="#更换-zsh-主题为-Dracula" class="headerlink" title="更换 zsh 主题为 Dracula"></a>更换 zsh 主题为 Dracula</h3><ul><li>下载主题文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/dracula/zsh.git</span><br></pre></td></tr></table></figure></li><li>创建一个指向 oh-my-zsh 主题文件夹的符号链接，DRACULA_THEME 是刚才下载主题的目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s <span class="variable">$DRACULA_THEME</span>/dracula.zsh-theme ~/.oh-my-zsh/themes/dracula.zsh-theme</span><br></pre></td></tr></table></figure></li><li>修改 zsh 主题，编辑 .zshrc 文件，修改 ZSH_THEME 为 “dracula” <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line">ZSH_THEME=<span class="string">&quot;dracula&quot;</span> </span><br></pre></td></tr></table></figure></li></ul><h3 id="更换-iterm2-主题为-Dracula"><a href="#更换-iterm2-主题为-Dracula" class="headerlink" title="更换 iterm2 主题为 Dracula"></a>更换 iterm2 主题为 Dracula</h3><ul><li><p>下载 iterm2 的 Dracula 主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/dracula/iterm.git</span><br></pre></td></tr></table></figure></li><li><p>设置主题</p><ul><li>iTerm2 &gt; Preferences &gt; Profiles &gt; Colors Tab</li><li>Open the Color Presets…</li><li>从列表中选择 import</li><li>选择刚才下载主题中 Dracula.itermcolors 文件，确定</li></ul></li><li><p>再次打开 Color Presets… ，选择 Dracula</p></li><li><p>重启终端</p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/daiyuhe/article/details/88667875">利用 iTerm2+oh-my-zsh+Dracula 主题打造我的 Mac 终端利器</a></li><li><a href="https://blog.csdn.net/qq_43656353/article/details/106444661">关于 zsh 目录权限问题的解决</a></li><li><a href="https://blog.csdn.net/weixin_43376075/article/details/110840009">mac 入门-安装 oh my zsh</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> iTerm2 </tag>
            
            <tag> Dracula </tag>
            
            <tag> oh-my-zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 平台安装 MongoDB</title>
      <link href="/post/d6049e8.html"/>
      <url>/post/d6049e8.html</url>
      
        <content type="html"><![CDATA[<h2 id="MongoDB-下载"><a href="#MongoDB-下载" class="headerlink" title="MongoDB 下载"></a>MongoDB 下载</h2><ul><li>MongoDB 提供了 Mac 平台上 64 位的安装包，你可以在官网下载安装包</li><li><a href="https://www.mongodb.com/try/download/community">官方下载链接</a></li></ul><h2 id="MongoDB-安装步骤"><a href="#MongoDB-安装步骤" class="headerlink" title="MongoDB 安装步骤"></a>MongoDB 安装步骤</h2><ul><li>找到下载的 MongoDB 压缩文件 mongodb-macos-x86_64-5.0.5.tgz</li><li>移动文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> mongodb-macos-x86_64-5.0.5.tgz /usr/local/</span><br></pre></td></tr></table></figure></li><li>解压<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf mongodb-macos-x86_64-5.0.5.tgz</span><br></pre></td></tr></table></figure></li><li>重命名<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> mongodb-macos-x86_64-5.0.5/ mongodb</span><br></pre></td></tr></table></figure></li><li>删除压缩文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> mongodb-macos-x86_64-5.0.5.tgz</span><br></pre></td></tr></table></figure></li><li>添加环境变量(安装过 oh-my-zsh)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1) vim ~/.zshrc</span><br><span class="line">(2) 添加 PATH</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/mongodb/bin</span><br><span class="line">(3) 使修改立即生效</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li><li>创建日志及数据存放的目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1) 切换到 /usr/local/var/db 目录</span><br><span class="line"><span class="built_in">mkdir</span> mongodb</span><br><span class="line">(2) 切换到 /usr/local/var/log 目录</span><br><span class="line"><span class="built_in">touch</span> mongodb.log</span><br></pre></td></tr></table></figure></li><li>添加配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(1) 切换到 /usr/local/etc 目录下</span><br><span class="line">(2) vim mongodb.conf</span><br><span class="line">(3) 添加内容</span><br><span class="line"><span class="comment"># 数据库路径</span></span><br><span class="line">dbpath=/usr/local/var/db/mongodb</span><br><span class="line"><span class="comment"># 日志输出文件路径</span></span><br><span class="line">logpath=/usr/local/var/log/mongodb.log</span><br><span class="line"><span class="comment"># 错误日志采用追加模式</span></span><br><span class="line">logappend=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 启用日志文件，默认启用</span></span><br><span class="line">journal=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span></span><br><span class="line">quiet=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 端口号 默认为27017</span></span><br><span class="line">port=27017</span><br><span class="line"><span class="comment"># 允许远程访问</span></span><br><span class="line"><span class="comment"># bind_ip=0.0.0.0</span></span><br><span class="line"><span class="comment"># 开启子进程</span></span><br><span class="line">fork=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 开启认证，必选先添加用户，先不开启（不用验证账号密码）</span></span><br><span class="line"><span class="comment"># auth=true</span></span><br></pre></td></tr></table></figure></li><li>直接设置配置文件启动<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --config /usr/local/etc/mongodb.conf</span><br></pre></td></tr></table></figure></li><li>另外开启新的终端，输入 mongo 命令进入 MongoDB 数据库</li><li>正常退出数据库(mongo 执行命令的终端窗口)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) use admin</span><br><span class="line">(2) db.shutdownServer()</span><br><span class="line">(3) control + c</span><br></pre></td></tr></table></figure><h2 id="MongoDB-常用命令"><a href="#MongoDB-常用命令" class="headerlink" title="MongoDB 常用命令"></a>MongoDB 常用命令</h2></li></ul><table><thead><tr><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">db.help()</td><td align="center">查看命令提示</td></tr><tr><td align="center">db</td><td align="center">查看当前所在数据库的名字</td></tr><tr><td align="center">use 数据库名</td><td align="center">表示切换或是创建数据库</td></tr><tr><td align="center">show dbs</td><td align="center">显示有数据的库</td></tr><tr><td align="center">db.stats()</td><td align="center">查看当前数据的状态</td></tr><tr><td align="center">db.version()</td><td align="center">查看 MongoDB 版本</td></tr><tr><td align="center">db.[数据库名].insert()</td><td align="center">插入数据</td></tr><tr><td align="center">db.[数据库名].find()</td><td align="center">查找数据</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 平台安装 Homebrew</title>
      <link href="/post/48976.html"/>
      <url>/post/48976.html</url>
      
        <content type="html"><![CDATA[<h2 id="brew-安装脚本"><a href="#brew-安装脚本" class="headerlink" title="brew 安装脚本"></a>brew 安装脚本</h2><ul><li>brew 安装脚本(国内源)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span> </span><br></pre></td></tr></table></figure></li><li>傻瓜式安装(建议选择中科大源)</li></ul><h2 id="brew-卸载脚本"><a href="#brew-卸载脚本" class="headerlink" title="brew 卸载脚本"></a>brew 卸载脚本</h2><ul><li>brew 卸载脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>brew 常用命令</li></ul><table><thead><tr><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">安装软件</td><td align="center">brew install xxx</td></tr><tr><td align="center">卸载软件</td><td align="center">brew uninstall xxx</td></tr><tr><td align="center">搜索软件</td><td align="center">brew search xxx</td></tr><tr><td align="center">更新软件</td><td align="center">brew upgrade xxx</td></tr><tr><td align="center">查看列表</td><td align="center">list</td></tr><tr><td align="center">更新 brew</td><td align="center">brew update</td></tr><tr><td align="center">清理所有包的旧版本</td><td align="center">brew cleanup</td></tr><tr><td align="center">清理指定包的旧版本</td><td align="center">brew cleanup $FORMULA</td></tr><tr><td align="center">查看可清理的旧版本包，不执行实际操作</td><td align="center">brew cleanup -n</td></tr></tbody></table><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.jianshu.com/p/032ce92e4c7b?utm_campaign=shakespeare">转载: homebrew 安装、卸载、基本操作</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
